{"version":3,"sources":["../../src/utils/helper.ts"],"names":["require_helper","__commonJSMin","exports","module","helper","item","price","quantity","items","total","tax","subTotal"],"mappings":"8DAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CASA,IAAMC,EAAkB,CAQvB,cAAe,SAAUC,EAAwB,CAChD,IAAMC,EAAQD,EAAK,OAAS,EACtBE,EAAWF,EAAK,UAAY,EAClC,OAAQC,EAAQC,GAAU,QAAQ,CAAC,CACpC,EASA,aAAc,SAAUC,EAAoC,CAC3D,GAAIA,EAAM,SAAW,EACpB,MAAO,GAGR,IAAIC,EAAQ,EAEZ,OAAAD,EAAM,QAASH,GAAS,CACvBI,GAAS,OAAO,KAAK,cAAcJ,CAAI,CAAC,CACzC,CAAC,EAEMI,EAAM,QAAQ,CAAC,CACvB,EASA,QAAS,SAAUD,EAAoC,CACtD,GAAIA,EAAM,SAAW,EACpB,MAAO,GAGR,IAAIC,EAAQ,EAEZ,OAAAD,EAAM,QAASH,GAAS,CACvB,IAAMC,EAAQD,EAAK,MACbE,EAAWF,EAAK,SAChBK,EAAML,EAAK,KAAO,EAExBI,GAAUH,EAAQC,EAAWG,EAAO,GACrC,CAAC,EAEMD,EAAM,QAAQ,CAAC,CACvB,EASA,eAAgB,SAAUD,EAAoC,CAC7D,GAAIA,EAAM,SAAW,EACpB,MAAO,GAGR,IAAMG,EAAW,OAAO,KAAK,aAAaH,CAAK,CAAC,EAC1CE,EAAM,OAAO,KAAK,QAAQF,CAAK,CAAC,EAEtC,OAAQG,EAAWD,GAAK,QAAQ,CAAC,CAClC,CACD,EAEAP,EAAO,QAAUC","sourcesContent":["import type { ItemInfo } from \"../../global\";\r\n\r\ninterface Helpers {\r\n\tcalcItemTotal(item: ItemInfo): number | string;\r\n\tcalcTax(items: ItemInfo[]): number | string;\r\n\tcalcSubTotal(items: ItemInfo[]): number | string;\r\n\tcalcFinalTotal(items: ItemInfo[]): number | string;\r\n}\r\n\r\nconst helper: Helpers = {\r\n\t/**\r\n\t * Item total price calculation.\r\n\t *\r\n\t * @param {Object} item.\r\n\t * @returns {number} total.\r\n\t * @since 1.0.0\r\n\t */\r\n\tcalcItemTotal: function (item: ItemInfo): string {\r\n\t\tconst price = item.price || 0;\r\n\t\tconst quantity = item.quantity || 1;\r\n\t\treturn (price * quantity).toFixed(2);\r\n\t},\r\n\r\n\t/**\r\n\t * Calculate subtotal.\r\n\t *\r\n\t * @param {Object} items.\r\n\t * @returns {number} total.\r\n\t * @since 1.0.0\r\n\t */\r\n\tcalcSubTotal: function (items: ItemInfo[]): number | string {\r\n\t\tif (items.length === 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\r\n\t\titems.forEach((item) => {\r\n\t\t\ttotal += Number(this.calcItemTotal(item));\r\n\t\t});\r\n\r\n\t\treturn total.toFixed(2);\r\n\t},\r\n\r\n\t/**\r\n\t * Calculate tax.\r\n\t *\r\n\t * @param {Object} items.\r\n\t * @returns {number} total.\r\n\t * @since 1.0.0\r\n\t */\r\n\tcalcTax: function (items: ItemInfo[]): number | string {\r\n\t\tif (items.length === 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\r\n\t\titems.forEach((item) => {\r\n\t\t\tconst price = item.price;\r\n\t\t\tconst quantity = item.quantity;\r\n\t\t\tconst tax = item.tax || 0;\r\n\r\n\t\t\ttotal += (price * quantity * tax) / 100;\r\n\t\t});\r\n\r\n\t\treturn total.toFixed(2);\r\n\t},\r\n\r\n\t/**\r\n\t * Calculate total final price.\r\n\t *\r\n\t * @param {Object} items.\r\n\t * @returns {number} total.\r\n\t * @since 1.0.0\r\n\t */\r\n\tcalcFinalTotal: function (items: ItemInfo[]): number | string {\r\n\t\tif (items.length === 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tconst subTotal = Number(this.calcSubTotal(items));\r\n\t\tconst tax = Number(this.calcTax(items));\r\n\r\n\t\treturn (subTotal + tax).toFixed(2);\r\n\t},\r\n};\r\n\r\nmodule.exports = helper;\r\n"]}